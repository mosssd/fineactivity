generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  age       String?
  instagram String?
  email     String   @unique
  password  String?
  image     String?  @default("https://cdn-icons-png.flaticon.com/512/149/149071.png")
  role      String   @default("member")
  activitiesPosted  Activity[] 
  EventPosted  Event[]
  GroupPosted  Group[]
  savedActivities  String[] // ความสัมพันธ์กับ SavedActivity
  savedEvents  String[] // ความสัมพันธ์กับ SavedEvent
  emailVerified DateTime?
  listofGroup String[]
  listofEvent String[]
  accounts   Account[]
  sessions   Session[]
  reviews    Review[]
}

model Activity {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  activityName String
  imageMain   String
  imageDetail String[]   @default([])
  description String?
  address     String?  
  location     String?
  userId      String     @db.ObjectId
  postedBy    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  String[]
  contact    String?
  dayTime    String?
  activityGroup Group[]
  reviews    Review[]
  createdAt  DateTime @default(now()) @map("created_at")
}

model Group {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  groupName   String
  description String
  userId      String     @db.ObjectId
  postedBy    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId  String     @db.ObjectId
  activityBy  Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  date   DateTime?
  startTime  String @default("00:00")
  endTime    String @default("00:00")
  listUserJoin String[]
  createdAt  DateTime @default(now()) @map("created_at")
} 
model Event {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  eventName String
  image   String
  description String?
  location     String?
  userId      String     @db.ObjectId
  postedBy    User       @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  categories  String[]
  contact    String?
  startDate  DateTime 
  endDate    DateTime
  startTime  String?
  endTime    String?
  createdAt  DateTime @default(now()) @map("created_at")
  listUserJoin String[]
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  comment   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  activityId String  @db.ObjectId
  activity  Activity @relation(fields: [activityId], references: [id] ,onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  userId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}
